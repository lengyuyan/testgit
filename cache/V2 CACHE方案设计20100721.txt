
1、读写缓存物理空间分开，只对写缓存空间进行镜像。

2、读写缓存在一个缓存模块中实现，读缓存能够访问写缓存空间（HASH表）

3、读命令命中写缓存（在读缓存处理流程中判断），直接使用写缓存空间数据，该数据不再拷贝到读缓存空间。

4、写命令命中读缓存，写命令下层写入成功后，将读缓存中命中的数据置为无效

5、3和4保证一份数据只在读缓存空间中或只在写缓存空间中，不会同时在读写缓存空间中。但是可能在读写缓存空间中同时存在一份数据对应的CACHE块。
   比较复杂的情况：读命令一个满CACHE块的数据一部分数据命中读缓存空间、另一部分命中写缓存空间，命中的两个CACHE块LBA地址相同。

6、缓存模块基于RAID实现。

7、通过添加IO读写缓存标志位，实现LV缓存状态设置功能：LV写缓存关闭――在LV层将该LV的IO设置为透写；LV读缓存关闭――在LV层将该LV的IO设置为透读。
   若RAID实现LUN，则为“LUN缓存状态设置功能”。

8、透写：写数据不写入写缓存，若命中缓存则将命中的数据置为无效
   透读：读数据不写入读缓存，若命中缓存则将命中的数据置为无效

